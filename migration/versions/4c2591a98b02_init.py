"""init

Revision ID: 4c2591a98b02
Revises: 
Create Date: 2025-06-08 10:47:52.302126

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '4c2591a98b02'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('discord_activity_sessions',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('started_at', sa.TIMESTAMP(), server_default=sa.text("(NOW() at time zone 'utc')"), nullable=False),
    sa.Column('finished_at', sa.TIMESTAMP(), nullable=True),
    sa.Column('user_id', sa.String(), nullable=False),
    sa.Column('user_name', sa.String(), nullable=False),
    sa.Column('activity_name', sa.String(), nullable=False),
    sa.Column('extra_data', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_discord_activity_sessions_user_id'), 'discord_activity_sessions', ['user_id'], unique=False)
    op.create_table('discord_reply_commands',
    sa.Column('en', sa.Boolean(), nullable=False),
    sa.Column('command', sa.String(), nullable=False),
    sa.Column('text', sa.Text(), nullable=False),
    sa.Column('reply', sa.Boolean(), nullable=False),
    sa.Column('channel_id', sa.BigInteger(), nullable=True),
    sa.PrimaryKeyConstraint('command')
    )
    op.create_table('discord_status_sessions',
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('started_at', sa.TIMESTAMP(), server_default=sa.text("(NOW() at time zone 'utc')"), nullable=False),
    sa.Column('finished_at', sa.TIMESTAMP(), nullable=True),
    sa.Column('user_id', sa.String(), nullable=False),
    sa.Column('user_name', sa.String(), nullable=False),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('extra_data', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_discord_status_sessions_user_id'), 'discord_status_sessions', ['user_id'], unique=False)
    op.create_table('dynamic_config',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=False),
    sa.Column('atime', sa.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('gigachat_messages',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('ctime', sa.TIMESTAMP(), server_default=sa.text("(NOW() at time zone 'utc')"), nullable=False),
    sa.Column('user_id', sa.String(), nullable=False),
    sa.Column('id_', sa.String(), nullable=True),
    sa.Column('role', sa.String(), nullable=True),
    sa.Column('content', sa.Text(), nullable=True),
    sa.Column('function_call', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('name', sa.String(), nullable=True),
    sa.Column('attachments', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('data_for_context', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_gigachat_messages_user_id'), 'gigachat_messages', ['user_id'], unique=False)
    op.create_table('know_ids',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('note', sa.Text(), nullable=True),
    sa.Column('extra_data', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=True),
    sa.Column('vk_id', sa.Integer(), nullable=True),
    sa.Column('discord_id', sa.Integer(), nullable=True),
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('en', sa.Boolean(), nullable=False),
    sa.Column('ctime', sa.TIMESTAMP(), server_default=sa.text("(NOW() at time zone 'utc')"), nullable=False),
    sa.Column('atime', sa.TIMESTAMP(), nullable=True),
    sa.Column('dtime', sa.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('polls',
    sa.Column('data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
    sa.Column('key', sa.String(), nullable=False),
    sa.Column('service', sa.Integer(), nullable=False),
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('en', sa.Boolean(), nullable=False),
    sa.Column('ctime', sa.TIMESTAMP(), server_default=sa.text("(NOW() at time zone 'utc')"), nullable=False),
    sa.Column('atime', sa.TIMESTAMP(), nullable=True),
    sa.Column('dtime', sa.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('send_on_schedule',
    sa.Column('cron', sa.String(), nullable=False),
    sa.Column('message_data', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.Column('service', sa.Enum('VK', name='sendonscheduleserviceenum'), nullable=True),
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('en', sa.Boolean(), nullable=False),
    sa.Column('ctime', sa.TIMESTAMP(), server_default=sa.text("(NOW() at time zone 'utc')"), nullable=False),
    sa.Column('atime', sa.TIMESTAMP(), nullable=True),
    sa.Column('dtime', sa.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('triggers_answers',
    sa.Column('trigger', sa.String(), nullable=False),
    sa.Column('answer', sa.String(), nullable=True),
    sa.Column('attachment', sa.String(), nullable=True),
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('en', sa.Boolean(), nullable=False),
    sa.Column('ctime', sa.TIMESTAMP(), server_default=sa.text("(NOW() at time zone 'utc')"), nullable=False),
    sa.Column('atime', sa.TIMESTAMP(), nullable=True),
    sa.Column('dtime', sa.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_triggers_answers_trigger'), 'triggers_answers', ['trigger'], unique=True)
    op.create_table('users',
    sa.Column('username', sa.String(), nullable=False),
    sa.Column('email', sa.String(), nullable=False),
    sa.Column('password', sa.String(), nullable=False),
    sa.Column('is_admin', sa.Boolean(), nullable=False),
    sa.Column('id', sa.BigInteger(), autoincrement=True, nullable=False),
    sa.Column('en', sa.Boolean(), nullable=False),
    sa.Column('ctime', sa.TIMESTAMP(), server_default=sa.text("(NOW() at time zone 'utc')"), nullable=False),
    sa.Column('atime', sa.TIMESTAMP(), nullable=True),
    sa.Column('dtime', sa.TIMESTAMP(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=False)
    op.create_table('vk_tasks',
    sa.Column('uuid', sa.String(), nullable=False),
    sa.Column('func', sa.String(), nullable=False),
    sa.Column('args', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=True),
    sa.Column('kwargs', postgresql.JSONB(astext_type=sa.Text()), server_default=sa.text("'{}'::jsonb"), nullable=True),
    sa.Column('errors', sa.Text(), nullable=True),
    sa.Column('tries', sa.Integer(), nullable=False),
    sa.Column('created', sa.TIMESTAMP(), nullable=True),
    sa.Column('started', sa.TIMESTAMP(), nullable=True),
    sa.Column('done', sa.TIMESTAMP(), nullable=True),
    sa.Column('ctime', sa.TIMESTAMP(), server_default=sa.text("(NOW() at time zone 'utc')"), nullable=False),
    sa.PrimaryKeyConstraint('uuid')
    )
    op.create_table('triggers_history',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('ctime', sa.TIMESTAMP(), server_default=sa.text("(NOW() at time zone 'utc')"), nullable=False),
    sa.Column('trigger_answer_id', sa.BigInteger(), nullable=False),
    sa.Column('vk_id', sa.Integer(), nullable=False),
    sa.Column('message_data', postgresql.JSONB(astext_type=sa.Text()), nullable=False),
    sa.ForeignKeyConstraint(['trigger_answer_id'], ['triggers_answers.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('triggers_history')
    op.drop_table('vk_tasks')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_triggers_answers_trigger'), table_name='triggers_answers')
    op.drop_table('triggers_answers')
    op.drop_table('send_on_schedule')
    op.drop_table('polls')
    op.drop_table('know_ids')
    op.drop_index(op.f('ix_gigachat_messages_user_id'), table_name='gigachat_messages')
    op.drop_table('gigachat_messages')
    op.drop_table('dynamic_config')
    op.drop_index(op.f('ix_discord_status_sessions_user_id'), table_name='discord_status_sessions')
    op.drop_table('discord_status_sessions')
    op.drop_table('discord_reply_commands')
    op.drop_index(op.f('ix_discord_activity_sessions_user_id'), table_name='discord_activity_sessions')
    op.drop_table('discord_activity_sessions')
    # ### end Alembic commands ###
