services:
  web:
    build:
      context: .
      dockerfile: docker/base/Dockerfile
    container_name: web
    command: python3 web.py
    ports:
      - "8011:8010"
    volumes:
      - .:/code
    links:
      - redis
      - db
      - mailhog
    depends_on:
      migrations:
        condition: service_completed_successfully
      redis:
        condition: service_started
      mailhog:
        condition: service_started
      db:
        condition: service_healthy
    env_file:
      - .env

  rest_api:
    build:
      context: .
      dockerfile: docker/base/Dockerfile
    container_name: rest_api
    command: python3 rest_api.py
    ports:
      - "8010:8010"
    volumes:
      - .:/code
    links:
      - redis
      - db
      - mailhog
      - rabbitmq
    depends_on:
      migrations:
        condition: service_completed_successfully
      redis:
        condition: service_started
      mailhog:
        condition: service_started
      db:
        condition: service_healthy
    env_file:
      - .env

  vk_bot:
    build:
      context: .
      dockerfile: docker/base/Dockerfile
    container_name: vk_bot
    command: python3 vk_bot.py
    volumes:
      - .:/code
    links:
      - redis
      - db
#      - dbmate
      - mailhog
      - rabbitmq
    depends_on:
      migrations:
        condition: service_completed_successfully
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_started
      mailhog:
        condition: service_started
      db:
        condition: service_healthy
      utils_service:
        condition: service_started
    env_file:
      - .env

  discord:
    build:
      context: .
      dockerfile: docker/base/Dockerfile
    container_name: discord
    command: python3 discord_service.py
    volumes:
      - .:/code
    links:
      - redis
      - db
#      - dbmate
      - mailhog
    depends_on:
      migrations:
        condition: service_completed_successfully
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_started
      mailhog:
        condition: service_started
      db:
        condition: service_healthy
      utils_service:
        condition: service_started
    env_file:
      - .env

  db_dumper:
    build:
      context: .
      dockerfile: docker/base/Dockerfile
    container_name: db_dumper
    command: python3 db_dumper.py
    volumes:
      - .:/code
    links:
      - db
#      - dbmate
    depends_on:
      migrations:
        condition: service_completed_successfully
      db:
        condition: service_healthy
    env_file:
      - .env

  utils_service:
    build:
      context: .
      dockerfile: docker/base/Dockerfile
    container_name: utils_service
    command: python3 utils_service.py
    volumes:
      - .:/code
    links:
      - redis
      - db
#      - dbmate
      - mailhog
    depends_on:
      migrations:
        condition: service_completed_successfully
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_started
      mailhog:
        condition: service_started
      db:
        condition: service_healthy
    env_file:
      - .env

  db:
    image: postgres:15
    container_name: db
    #    ports:
    #      - "5433:5432"
    environment:
      - POSTGRES_DB=vk_bot
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  migrations:
    build:
      context: .
      dockerfile: docker/base/Dockerfile
    container_name: migrations
    command:  alembic upgrade head
    #command:  alembic revision --autogenerate -m "init"
    volumes:
      - .:/code
    links:
      - db
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env

  redis:
    image: redis
    command: [ "redis-server", "--appendonly", "yes", "--requirepass", $REDIS_PASS ]
    env_file:
      - .env

  mailhog:
    image: mailhog/mailhog
    ports:
      - "1025:1025"
      - "8025:8025"

  pgweb:
    image: sosedoff/pgweb
    ports:
      - "8081:8081"
    links:
      - db
    environment:
      - PGWEB_DATABASE_URL=postgres://postgres:postgres@db:5432/vk_bot?sslmode=disable
    depends_on:
      db:
        condition: service_healthy
  
  cloudbeaver:
    container_name: dbeaver
    image: dbeaver/cloudbeaver
    restart: unless-stopped
    links:
      - db
    ports:
      - "8978:8978"
    #    volumes:
    #      - cloudbeaver:/opt/cloudbeaver/workspace
    depends_on:
      db:
        condition: service_healthy

  nginx:
    container_name: nginx
    image: nginx
    volumes:
      - ./etc/nginx.conf:/etc/nginx/nginx.conf
      - ./static/:/static/
    ports:
      - "8080:80"
      #environment:
      #- NGINX_PORT=80

  rabbitmq:
    image: rabbitmq:3-management
    volumes:
      - ./etc/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    ports:
      - "15672:15672"
      - "5672:5672"
    env_file:
      - .env
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3
